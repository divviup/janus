[package]
name = "janus_aggregator"
edition.workspace = true
homepage.workspace = true
license.workspace = true
publish = false
repository.workspace = true
rust-version.workspace = true
version.workspace = true

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[features]
default = []
fpvec_bounded_l2 = ["dep:fixed", "janus_core/fpvec_bounded_l2"]
tokio-console = ["dep:console-subscriber"]
otlp = [
    "dep:opentelemetry-otlp",
    "dep:tracing-opentelemetry",
]
prometheus = [
    "dep:opentelemetry-prometheus",
    "dep:prometheus",
    "dep:trillium-prometheus",
]
test-util = [
    "janus_aggregator_core/test-util",
    "janus_core/test-util",
    "janus_messages/test-util",
    "dep:testcontainers",
    "dep:trillium-testing",
]

[dependencies]
anyhow.workspace = true
assert_matches = { workspace = true }
async-trait = { workspace = true }
aws-lc-rs = { workspace = true }
backoff = { workspace = true, features = ["tokio"] }
base64.workspace = true
bytes.workspace = true
chrono.workspace = true
clap.workspace = true
console-subscriber = { workspace = true, optional = true }
deadpool = { workspace = true, features = ["rt_tokio_1"] }
deadpool-postgres = { workspace = true }
educe.workspace = true
fixed = { workspace = true, optional = true }
futures = { workspace = true }
hex = { workspace = true, features = ["serde"] }
http.workspace = true
http-api-problem.workspace = true
itertools.workspace = true
janus_aggregator_api.workspace = true
janus_aggregator_core.workspace = true
janus_core.workspace = true
janus_messages.workspace = true
k8s-openapi.workspace = true
kube.workspace = true
mime.workspace = true
moka = { version = "0.12.10", features = ["future"] }
opentelemetry.workspace = true
opentelemetry-otlp = { workspace = true, features = ["metrics"], optional = true }
opentelemetry-prometheus = { workspace = true, optional = true }
opentelemetry_sdk = { workspace = true, features = ["rt-tokio"] }
pem.workspace = true
postgres-protocol = { workspace = true }
postgres-types = { workspace = true, features = ["derive", "array-impls"] }
prio.workspace = true
prometheus = { workspace = true, optional = true }
querystring = { workspace = true }
rand = { workspace = true, features = ["min_const_gen"] }
rayon.workspace = true
regex = { workspace = true }
reqwest = { workspace = true, features = ["json"] }
rustls = { workspace = true }
rustls-pemfile = { workspace = true }
retry-after.workspace = true
sec1.workspace = true
serde.workspace = true
serde_json.workspace = true
serde_urlencoded = { workspace = true }
serde_yaml.workspace = true
signal-hook = { workspace = true }
signal-hook-tokio = { workspace = true, features = ["futures-v0_3"] }
testcontainers = { workspace = true, optional = true }
thiserror.workspace = true
tokio.workspace = true
tokio-postgres = { workspace = true, features = ["with-chrono-0_4", "with-serde_json-1", "with-uuid-1", "array-impls"] }
tokio-postgres-rustls = { workspace = true }
tracing = { workspace = true }
tracing-chrome = { workspace = true }
tracing-log = { workspace = true }
tracing-opentelemetry = { workspace = true, optional = true }
tracing-stackdriver = { workspace = true }
tracing-subscriber = { workspace = true, features = ["std", "env-filter", "fmt", "json"] }
trillium.workspace = true
trillium-api.workspace = true
trillium-caching-headers.workspace = true
trillium-head.workspace = true
trillium-macros = "0.0.6"
trillium-opentelemetry.workspace = true
trillium-prometheus = { workspace = true, optional = true }
trillium-router.workspace = true
trillium-testing = { workspace = true, optional = true }
trillium-tokio.workspace = true
url.workspace = true
uuid = { workspace = true, features = ["serde"] }

[dev-dependencies]
janus_aggregator = { workspace = true, features = ["fpvec_bounded_l2", "test-util"] }
janus_aggregator_core = { workspace = true, features = ["test-util"] }
mockito = { workspace = true }
opentelemetry_sdk = { workspace = true, features = ["testing"] }
prio = { workspace = true, features = ["multithreaded"] }
quickcheck = { workspace = true }
quickcheck_macros = { workspace = true }
rstest.workspace = true
tempfile = { workspace = true }
tokio = { workspace = true, features = ["net", "test-util"] } # ensure this remains compatible with the non-dev dependency
trillium-testing.workspace = true
trycmd = { workspace = true }
wait-timeout = { workspace = true }

[build-dependencies]
rustc_version = { workspace = true }
