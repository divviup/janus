# Common configuration parameters:

database:
  # Database URL. (required)
  url: "postgres://postgres:postgres@localhost:5432/postgres"

  # Timeout for new database connections. Defaults to 60 seconds.
  connection_pool_timeouts_s: 60

  # Maximum number of database connections. Defaults to CPUs * 4.
  connection_pool_max_size: 8

  # Flag to check if the database schema version is compatible upon startup.
  # (optional, defaults to true)
  check_schema_version: true

  # Path to a PEM file with root certificates to trust for TLS database
  # connections. If present, TLS may be used depending on the "sslmode"
  # connection string parameter, and the server's support for TLS. If absent,
  # TLS will never be used. (optional)
  tls_trust_store_path: /path/to/file.pem

# The maximum number of times a transaction can be retried. This is intended to
# guard against bugs that induce infinite retries. It should be set to a
# reasonably high limit to prevent legitimate work from being cancelled.
max_transaction_retries: 1000

# Socket address for /healthz and /traceconfigz HTTP requests. Defaults to 127.0.0.1:9001.
health_check_listen_address: "0.0.0.0:8000"

# Logging configuration. (optional)
logging_config:
  # Flag to output structured logs. (optional)
  force_json_output: true

  # Flag to output structured logs in Google Cloud Logging's format. (optional)
  stackdriver_json_output: false

  # Configuration for the tokio-console tracing subscriber. (optional)
  tokio_console_config:
    # Enable the subscriber. (optional)
    enabled: true
    # Socket address to listen on. (optional)
    listen_address: "127.0.0.1:6669"

  # OpenTelemetry tracing configuration. This can contain an "otlp" key with a
  # map containing exporter configuration. (optional)
  open_telemetry_config:
    otlp:
      # OTLP gRPC endpoint.
      endpoint: "https://example.com"

  # Flag to write tracing spans and events to JSON files. This is compatible
  # with Chrome's trace viewer, available at `chrome://tracing`, and
  # Perfetto, at https://ui.perfetto.dev/. (optional)
  chrome: false

# Metrics configuration. (optional)
metrics_config:
  # Metrics exporter configuration. This contains a map with single key, either
  # "prometheus" or "otlp". (optional)
  exporter:
    prometheus:
      # Address on which to listen for Prometheus metrics scrape requests. (optional)
      host: "0.0.0.0"
      # Port number for metrics server. (optional)
      port: 9464

  ##otlp:
  ##  # OTLP gRPC endpoint.
  ##  endpoint: "https://example.com/"

  # Configuration for Tokio runtime metrics. (optional)
  tokio:
    # Enable exporting metrics from the Tokio runtime. If this is true, the
    # binary must have been compiled with the flag `--cfg tokio_unstable`.
    # (optional)
    enabled: false

# Aggregation job creator-specific parameters:

# Number of sharded database records per batch aggregation. Must not be greater
# than the equivalent setting in the collection job driver. (required)
batch_aggregation_shard_count: 32

# Interval on which to check the database for new tasks. (required)
tasks_update_frequency_s: 3600

# Interval on which to create new aggregation jobs. (required)
aggregation_job_creation_interval_s: 60

# Minimum aggregation job size, in reports. (required)
min_aggregation_job_size: 10

# Maximum aggregation job size, in reports. (required)
max_aggregation_job_size: 100

# Maximum number of reports to load at a time when creating aggregation jobs.
# (optional, defaults to 5000)
aggregation_job_creation_report_window: 5000

# Maximum expected time difference between a report's timestamp and when it is
# uploaded. For time interval tasks, this is used to decide when to create an
# aggregation job with fewer than `min_aggregation_job_size` reports. (optional,
# defaults to 3600)
late_report_grace_period_s: 3600
