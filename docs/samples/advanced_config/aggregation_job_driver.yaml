# Common configuration parameters:

database:
  # Database URL. (required)
  url: "postgres://postgres:postgres@localhost:5432/postgres"

  # Timeout for new database connections. Defaults to 60 seconds.
  connection_pool_timeouts_s: 60

  # Maximum number of database connections. Defaults to CPUs * 4.
  connection_pool_max_size: 8

  # Flag to check if the database schema version is compatible upon startup.
  # (optional, defaults to true)
  check_schema_version: true

  # Path to a PEM file with root certificates to trust for TLS database
  # connections. If present, TLS may be used depending on the "sslmode"
  # connection string parameter, and the server's support for TLS. If absent,
  # TLS will never be used. (optional)
  tls_trust_store_path: /path/to/file.pem

# The maximum number of times a transaction can be retried. This is intended to
# guard against bugs that induce infinite retries. It should be set to a
# reasonably high limit to prevent legitimate work from being cancelled.
max_transaction_retries: 1000

# Socket address for /healthz and /traceconfigz HTTP requests. Defaults to 127.0.0.1:9001.
health_check_listen_address: "0.0.0.0:8000"

# Logging configuration. (optional)
logging_config:
  # Flag to output structured logs. (optional)
  force_json_output: true

  # Flag to output structured logs in Google Cloud Logging's format. (optional)
  stackdriver_json_output: false

  # Configuration for the tokio-console tracing subscriber. (optional)
  tokio_console_config:
    # Enable the subscriber. (optional)
    enabled: true
    # Socket address to listen on. (optional)
    listen_address: "127.0.0.1:6669"

  # OpenTelemetry tracing configuration. This can contain an "otlp" key with a
  # map containing exporter configuration. (optional)
  open_telemetry_config:
    otlp:
      # OTLP gRPC endpoint.
      endpoint: "https://example.com"

  # Flag to write tracing spans and events to JSON files. This is compatible
  # with Chrome's trace viewer, available at `chrome://tracing`, and
  # Perfetto, at https://ui.perfetto.dev/. (optional)
  chrome: false

# Metrics configuration. (optional)
metrics_config:
  # Metrics exporter configuration. This contains a map with single key, either
  # "prometheus" or "otlp". (optional)
  exporter:
    prometheus:
      # Address on which to listen for Prometheus metrics scrape requests. (optional)
      host: "0.0.0.0"
      # Port number for metrics server. (optional)
      port: 9464

  ##otlp:
  ##  # OTLP gRPC endpoint.
  ##  endpoint: "https://example.com/"

  # Configuration for Tokio runtime metrics. (optional)
  tokio:
    # Enable exporting metrics from the Tokio runtime. If this is true, the
    # binary must have been compiled with the flag `--cfg tokio_unstable`.
    # (optional)
    enabled: false

# Stack size, in bytes, for threads used for VDAF preparation. (optional)
thread_pool_stack_size: 2097152

# Aggregation job driver-related parameters:

# Maximum interval on which to acquire incomplete aggregation jobs. (required)
job_discovery_interval_s: 10

# Maximum number of aggregation jobs to step concurrently. (required)
max_concurrent_job_workers: 10

# Duration of leases of aggregation jobs being processed. (required)
worker_lease_duration_s: 600

# Maximum allowable clock skew used when identifying expired leases on
# aggregation jobs. (required)
worker_lease_clock_skew_allowance_s: 60

# Number of times to attempt processing an aggregation job before abandoning it.
# (required)
maximum_attempts_before_failure: 10

# Timeout to apply when establishing connections to the helper for HTTP requests, in seconds. See
# https://docs.rs/reqwest/latest/reqwest/struct.ClientBuilder.html#method.connect_timeout for
# details. (optional; defaults to 10 seconds)
http_request_connection_timeout_s: 10

# Timeout to apply to HTTP requests overall (including connection establishment) when communicating
# with the helper. See
# https://docs.rs/reqwest/latest/reqwest/struct.ClientBuilder.html#method.timeout for details.
# (optional; defaults to 30 seconds)
http_request_timeout_s: 30

# The initial interval, in milliseconds, to wait before retrying a retryable
# HTTP request. (optional, default 1 second)
retry_initial_interval_ms: 1000

# The maximum interval, in milliseconds, to wait before retrying a retryable
# HTTP request. (optional, default 30 seconds)
retry_max_interval_ms: 30000

# The maximum elapsed time, in milliseconds, to wait before giving up on
# retrying a retryable HTTP request. (optional, default 5 minutes)
retry_max_elapsed_time_ms: 300000

# Number of sharded database records per batch aggregation. Must not be greater
# than the equivalent setting in the collection job driver. (required)
batch_aggregation_shard_count: 32

# Defines the number of shards to break report & aggregation metric counters into. Increasing this
# value will reduce the amount of database contention during report uploads & aggregations, while
# increasing the cost of getting task metrics. (optional, default: 32)
task_counter_shard_count: 32

# Defines how often to refresh the HPKE configs cache, in milliseconds. This
# affects how often an aggregator becomes aware of key state changes. (optional,
# defaults to 30 minutes)
hpke_configs_refresh_interval: 1800000

# Defines how frequently outstanding asynchronous aggregation jobs where this
# aggregator is the Leader might be polled if the Helper does not send a
# Retry-After header, in milliseconds. (If the Helper does send a Retry-After
# header, it will be respected.) If unspecified, the default is one minute.
default_async_poll_interval: 5000

# Configuration for the taskprov extension. If enabled, this changes the behavior of the
# aggregator as described in draft-wang-ppm-dap-taskprov. (optional)
taskprov_config:
  # Whether to enable the taskprov extension. Defaults to false.
  enabled: false
